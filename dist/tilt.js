/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./js/tilt.js":
/*!********************!*\
  !*** ./js/tilt.js ***!
  \********************/
/***/ (() => {

eval("/**\n * allTilt.js\n * Author: Bastian Fie√üinger\n * Version: 1.0.0\n */\n\n\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nHTMLElement.prototype.allTilt = function (settings) {\n  var _this2 = this;\n  if (typeof settings == 'undefined') {\n    settings = {};\n  }\n\n  /**\n   * @param {number} settings.max - Maximum rotation of tilt object in degrees. Default: 20\n   * @param {boolean} settings.inverted - Invert the effect. Default: false\n   * @param {number|string} settings.perspective - use 'auto' or a numeric value. Default: 'auto'\n   * @param {number} settings.transitionDuration - Duration of transitioneffects on while entering or leaving the tilt box. Default 400\n   * @param {string} settings.easing - Easing Function. Default: cubic-bezier(.03,.98,.52,.99)\n   * @param {number} settings.scale - Scale the element while hovering. Default: 1\n   * @param {boolean} settings.ambientLightning - Add a lightning to the element. Default: true\n   * @param {number} settings.maxLightning - maximum opacity of the ambient lightning. Default: 0.5\n   * @param {string} settings.axis - might be 'both', 'x' or 'y'. Default: 'both'\n   * @param {boolean} settings.content3D.enabled - Automatically add a 3D Effect to inner contents. Default: true\n   * @param {string|array} settings.content3D.position - 'auto' will set the inner Element directly centered. Also strings like '50 40' or '50% 40%' as well as 'center left' are allowed. Default 'auto'\n   * @param {string|number} settings.content3D.intensity - 'auto' is used to determine the translateZ by making it half the elements larger side. You can use a number instead. Default 'auto'\n   */\n  var tiltSetup = function tiltSetup(settings) {\n    var defaults = {\n      max: 20,\n      inverted: false,\n      perspective: 'auto',\n      transitionDuration: 400,\n      easing: 'cubic-bezier(.03,.98,.52,.99)',\n      scale: 1,\n      ambientLightning: true,\n      maxLightning: 0.5,\n      axis: 'both',\n      content3D: {\n        enabled: false,\n        position: 'auto',\n        intensity: 'auto'\n      }\n    };\n\n    // Rebuild Settings\n    var settingsObj = {};\n    /**\n     * @param {string} prop - The actual Property to set.\n     * @param {string} innerprop - The Property if it's nested\n     * @param {string} aliasProp - The data-name of the Property\n     */\n    var setOptions = function setOptions(prop, innerProp, aliasProp) {\n      // Setup a new Object if there are nested Properties\n      if (innerProp != null && settingsObj[prop] == null) {\n        settingsObj[prop] = {};\n      }\n\n      // First Check for Data Attributes on an element\n      if (_this2.hasAttribute('data-tilt-' + aliasProp)) {\n        var attr = _this2.getAttribute('data-tilt-' + aliasProp);\n        try {\n          if (innerProp == null) {\n            settingsObj[prop] = JSON.parse(attr);\n          } else {\n            settingsObj[prop][innerProp] = JSON.parse(attr);\n          }\n        } catch (e) {\n          if (innerProp == null) {\n            settingsObj[prop] = attr;\n          } else {\n            settingsObj[prop][innerProp] = attr;\n          }\n        }\n\n        // Now Check the original Settings Object\n      } else if (prop in settings) {\n        if (innerProp == null) {\n          settingsObj[prop] = settings[prop];\n        } else {\n          settingsObj[prop][innerProp] = settings[prop][innerProp];\n        }\n\n        // At least check for the setting in the Defaults Object\n      } else {\n        if (innerProp == null) {\n          settingsObj[prop] = defaults[prop];\n        } else {\n          settingsObj[prop][innerProp] = defaults[prop][innerProp];\n        }\n      }\n    };\n\n    // Finally rebuild the settings Object\n    Object.keys(defaults).map(function (prop) {\n      if (_typeof(defaults[prop]) == 'object') {\n        Object.keys(defaults[prop]).map(function (nestedProp) {\n          setOptions(prop, nestedProp, prop + '-' + nestedProp);\n        });\n      } else {\n        setOptions(prop, null, prop);\n      }\n    });\n    return settingsObj;\n  };\n  settings = tiltSetup(settings);\n\n  // Autogenerate Perspective value from base element\n  if (settings.perspective == 'auto') {\n    settings.perspective = Math.max(this.getBoundingClientRect().width, this.getBoundingClientRect().height) * 2;\n  }\n\n  // Set initial Transform String\n  var initTransforms = 'perspective(' + settings.perspective + 'px) rotateX(0) rotateY(0)';\n\n  // Prepare all Values for usage\n  var prepareValues = function prepareValues(e) {\n    var elemViewBox = this.getBoundingClientRect(),\n      cursorX = e.clientX,\n      cursorY = e.clientY,\n      elemX = cursorX - elemViewBox.x,\n      elemY = cursorY - elemViewBox.y,\n      elemW = elemViewBox.width,\n      elemH = elemViewBox.height;\n    var percX = (Math.round(-elemX / elemW * 100) + 50) * 2,\n      percY = (Math.round(-elemY / elemH * 100) + 50) * 2;\n\n    // Invert Percentage\n    if (settings.inverted) {\n      percX *= -1;\n      percY *= -1;\n    }\n    var ambientAngle = Math.atan2(elemY, elemX) * (360 / Math.PI);\n    var val = {\n      clientX: cursorX,\n      clientY: cursorY,\n      elemX: elemX,\n      elemY: elemY,\n      elemH: elemH,\n      elemW: elemW,\n      ambientAngle: ambientAngle,\n      ambientOpacity: Math.min(Math.max(percY * settings.maxLightning / 100, 0), settings.maxLightning),\n      degX: Math.min(Math.max(percY * (settings.max / 100), settings.max * -1), settings.max),\n      degY: Math.min(Math.max(percX * (settings.max / 100), settings.max * -1), settings.max)\n    };\n    return val;\n  };\n  var initTiltContainer = function initTiltContainer(el, firstInstance) {\n    var elStyle = el.style;\n    elStyle.position = 'relative';\n    elStyle.transform = initTransforms;\n    elStyle.willChange = 'transform';\n    var elInitViewBox = el.getBoundingClientRect();\n    if (settings.content3D.enabled) {\n      el.style.transformStyle = 'preserve-3D';\n      var content3DSettings = settings.content3D;\n      var tiltInnerElementBox = el.querySelector('.alltilt-inner-viewbox') || document.createElement('div');\n      tiltInnerElementBox.className = 'alltilt-inner-viewbox';\n      var tiltInnerElement = tiltInnerElementBox.querySelector('.alltilt-inner') || document.createElement('div');\n      tiltInnerElement.className = 'alltilt-inner';\n      if (content3DSettings.intensity == 'auto') {\n        content3DSettings.intensity = Math.min(elInitViewBox.width, elInitViewBox.height) / 2;\n      }\n      var innerTransformStr = 'translateZ(' + content3DSettings.intensity + 'px)';\n      var inner3DPos = {\n        0: null,\n        // Top Value\n        1: null // Left Value\n      };\n      if (Array.isArray(content3DSettings.position)) {\n        inner3DPos[0] = content3DSettings.position[0];\n        inner3DPos[1] = content3DSettings.position[1];\n      } else if (content3DSettings.position == 'auto') {\n        inner3DPos[0] = 50;\n        inner3DPos[1] = 50;\n      } else {\n        var inner3DPosParts = content3DSettings.position.split(' ');\n        inner3DPosParts.forEach(function (pos, i) {\n          var trailingChar = pos.slice(-1);\n          if (!isNaN(pos)) {\n            inner3DPos[i] = parseInt(pos);\n          } else if (trailingChar == '%') {\n            // check last character is string\n            pos = pos.slice(0, -1); // trim last character\n            inner3DPos[i] = parseInt(pos);\n          } else if (pos == 'top' || pos == 'left') {\n            inner3DPos[i] = 0;\n          } else if (pos == 'center') {\n            inner3DPos[i] = 50;\n          } else if (pos == 'bottom' || pos == 'right') {\n            inner3DPos[i] = 100;\n          }\n        });\n      }\n      if (inner3DPos[0] == null || inner3DPos[1] == null || isNaN(inner3DPos[0]) || isNaN(inner3DPos[1])) {\n        console.warn('The value \"' + content3DSettings.position + '\" is not allowed for position! You can use integers, \"X%\", or keywords like \"center\", \"top\" or \"right\" instead. Usage: \"valTop valLeft\".');\n        inner3DPos[0] = 50;\n        inner3DPos[1] = 50;\n      }\n      innerTransformStr += ' translateY(-50%) translateX(-50%)';\n      var tiltInnerBoxElStyle = tiltInnerElementBox.style;\n      tiltInnerBoxElStyle.position = 'relative';\n      tiltInnerBoxElStyle.width = elInitViewBox.width + 'px';\n      tiltInnerBoxElStyle.height = elInitViewBox.height + 'px';\n\n      // Remove box padding as the element gets absolute positioned\n      el.style.padding = 0;\n      var tiltInnerElStyle = tiltInnerElement.style;\n      tiltInnerElStyle.position = 'absolute';\n      tiltInnerElStyle.top = inner3DPos[0] + '%';\n      tiltInnerElStyle.left = inner3DPos[1] + '%';\n      tiltInnerElStyle.webkitTransform = innerTransformStr;\n      tiltInnerElStyle.MozTransform = innerTransformStr;\n      tiltInnerElStyle.msTransform = innerTransformStr;\n      tiltInnerElStyle.OTransform = innerTransformStr;\n      tiltInnerElStyle.transform = innerTransformStr;\n      var elInitChildren = Array.from(el.children);\n      if (firstInstance) {\n        el.appendChild(tiltInnerElementBox);\n        tiltInnerElementBox.appendChild(tiltInnerElement);\n        elInitChildren.forEach(function (node, i) {\n          tiltInnerElement.appendChild(node);\n        });\n      }\n    }\n    if (settings.ambientLightning) {\n      var ambientLightningContainer = el.querySelector('.alltilt-ambient-lightning-container') || document.createElement('div');\n      ambientLightningContainer.className = 'alltilt-ambient-lightning-container';\n      var ambientLightningCStyle = ambientLightningContainer.style;\n      ambientLightningCStyle.width = elInitViewBox.width + 'px';\n      ambientLightningCStyle.height = elInitViewBox.height + 'px';\n      ambientLightningCStyle.position = 'absolute';\n      ambientLightningCStyle.left = 0;\n      ambientLightningCStyle.top = 0;\n      ambientLightningCStyle.overflow = 'hidden';\n      ambientLightningCStyle.pointerevents = 'none';\n      el.appendChild(ambientLightningContainer);\n      var ambientLightning = ambientLightningContainer.querySelector('.alltilt-ambient-lightning') || document.createElement('div');\n      ambientLightning.className = 'alltilt-ambient-lightning';\n      var ambientLightningTransformStr = 'rotate(180deg) translate(-50%, -50%)';\n      var ambientLightningStyle = ambientLightning.style;\n      ambientLightningStyle.background = 'linear-gradient(0deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%)';\n      ambientLightningStyle.position = 'absolute';\n      ambientLightningStyle.top = '50%';\n      ambientLightningStyle.left = '50%';\n      ambientLightningStyle.webkitTransform = ambientLightningTransformStr;\n      ambientLightningStyle.MozTransform = ambientLightningTransformStr;\n      ambientLightningStyle.msTransform = ambientLightningTransformStr;\n      ambientLightningStyle.OTransform = ambientLightningTransformStr;\n      ambientLightningStyle.transform = ambientLightningTransformStr;\n      ambientLightningStyle.transformOrigin = '50% 50%';\n      ambientLightningStyle.opacity = 0;\n      ambientLightningContainer.appendChild(ambientLightning);\n    }\n  };\n  var tiltMove = function tiltMove() {\n    this.values = prepareValues.call(this, event);\n    updTransform(this, this.values);\n  };\n  var updTransform = function updTransform(el, val) {\n    var transformStr = 'perspective(' + settings.perspective + 'px)';\n    if (settings.axis == 'x') {\n      transformStr += ' rotateY(' + val.degY + 'deg)';\n    } else if (settings.axis == 'y') {\n      transformStr += 'rotateX(' + val.degX + 'deg)';\n    } else {\n      transformStr += 'rotateX(' + val.degX + 'deg) rotateY(' + val.degY + 'deg)';\n    }\n    if (settings.scale && !isNaN(settings.scale)) {\n      transformStr += ' scale3d(' + settings.scale + ',' + settings.scale + ',1)';\n    } else {\n      transformStr += ' scale3d(1,1,1)';\n    }\n    el.style.webkitTransform = transformStr;\n    el.style.MozTransform = transformStr;\n    el.style.msTransform = transformStr;\n    el.style.OTransform = transformStr;\n    el.style.transform = transformStr;\n    if (settings.ambientLightning) {\n      var elAmbientLightning = el.querySelector('.alltilt-ambient-lightning');\n      var lightningDimensions = Math.max(val.elemH, val.elemW);\n      var lightningStyle = elAmbientLightning.style;\n      var lightningTransformStr = 'translate(-50%, -50%) rotate(' + val.ambientAngle + 'deg)';\n      lightningStyle.width = lightningDimensions * 2 + 'px';\n      lightningStyle.height = lightningDimensions * 2 + 'px';\n      lightningStyle.webkitTransform = transformStr;\n      lightningStyle.MozTransform = transformStr;\n      lightningStyle.msTransform = transformStr;\n      lightningStyle.OTransform = transformStr;\n      lightningStyle.transform = lightningTransformStr;\n      lightningStyle.opacity = val.ambientOpacity;\n    }\n  };\n  var tiltEnter = function tiltEnter() {\n    var _this = this;\n    if (settings.ambientLightning) {\n      var _elAmbientLightning = _this.querySelector('.alltilt-ambient-lightning');\n      _elAmbientLightning.style.transition = 'opacity ' + settings.transitionDuration + 'ms ' + settings.easing;\n    }\n    _this.style.transition = 'transform ' + settings.transitionDuration + 'ms ' + settings.easing;\n    setTimeout(function () {\n      _this.style.removeProperty('transition');\n      if (settings.ambientLightning) {\n        _this.querySelector('.alltilt-ambient-lightning').style.removeProperty('transition');\n      }\n    }, settings.transitionDuration);\n  };\n  var resetTransforms = function resetTransforms() {\n    var elStyle = this.style;\n    elStyle.transition = 'transform ' + settings.transitionDuration + 'ms ease-in-out';\n    elStyle.webkitTransform = initTransforms;\n    elStyle.MozTransform = initTransforms;\n    elStyle.msTransform = initTransforms;\n    elStyle.OTransform = initTransforms;\n    elStyle.transform = initTransforms;\n    if (settings.ambientLightning) {\n      this.querySelector('.alltilt-ambient-lightning').style.transition = 'opacity ' + settings.transitionDuration + 'ms ease-in-out';\n      this.querySelector('.alltilt-ambient-lightning').style.opacity = 0;\n    }\n  };\n\n  // Emulate Pointer Events on mobile Devices\n  function touchHandler(event) {\n    var touches = event.changedTouches,\n      first = touches[0],\n      type;\n    switch (event.type) {\n      case 'touchstart':\n        type = 'mouseenter';\n        break;\n      case 'touchmove':\n        type = 'mousemove';\n        break;\n      case 'touchcancel':\n      case 'touchend':\n        type = 'mouseleave';\n        break;\n      default:\n        return;\n    }\n    var simulatedEvent = document.createEvent(\"MouseEvent\");\n    simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0 /*left*/, null);\n    first.target.dispatchEvent(simulatedEvent);\n    event.preventDefault();\n  }\n  var BindEvents = function BindEvents(e) {\n    var _this = this;\n    initTiltContainer(_this, true);\n    window.addEventListener('resize', function (e) {\n      initTiltContainer(_this, false);\n    });\n    _this.addEventListener('mouseenter', tiltEnter);\n    _this.addEventListener('mousemove', tiltMove);\n    _this.addEventListener('mouseleave', resetTransforms);\n    // Enable Touch\n    // _this.addEventListener(\"touchstart\", touchHandler, true);\n    // _this.addEventListener(\"touchmove\", touchHandler, true);\n    // _this.addEventListener(\"touchend\", touchHandler, true);\n    // _this.addEventListener(\"touchcancel\", touchHandler, true);   \n  };\n  this.init = function () {\n    // Bind events\n    BindEvents.call(_this2);\n  };\n  this.init();\n};\ndocument.addEventListener('DOMContentLoaded', function () {\n  var tiltedElements = document.querySelectorAll('.tilt');\n  tiltedElements.forEach(function (element) {\n    element.allTilt();\n  });\n\n  // hljs.initHighlightingOnLoad();\n});\n\n//# sourceURL=webpack://themegen/./js/tilt.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/tilt.js"]();
/******/ 	
/******/ })()
;